"""short-filter-in-database

Revision ID: 9ef3762a6889
Revises: 23d4754077d1
Create Date: 2024-12-17 20:54:42.083741

"""
from alembic import op
import sqlalchemy as sa

# Import all known currently existing instruments
import models.decam
import models.ptf
from models.base import Psycopg2Connection
from models.instrument import get_instrument_instance
models.instrument.register_all_instruments()

# revision identifiers, used by Alembic.
revision = '9ef3762a6889'
down_revision = '23d4754077d1'
branch_labels = None
depends_on = None

def get_filter_translations( longtoshort=True ):
    """Return a dictionary of instrument→(oldfilter→newfilter) mappings."""

    conn = op.get_bind()
    image_instruments = conn.execute( sa.text( "SELECT DISTINCT ON(instrument) instrument FROM images" ) ).all()
    image_instruments = [ i[0] for i in image_instruments ]
    exposure_instruments = conn.execute( sa.text( "SELECT DISTINCT ON(instrument) instrument FROM exposures" ) ).all()
    exposure_instruments = [ e[0] for e in exposure_instruments ]

    unks = [ i for i in image_instruments if i not in models.instrument.INSTRUMENT_CLASSNAME_TO_CLASS ]
    if len( unks ) > 0:
        raise RuntimeError( f"Failed database migration: unknown instruments in the images table: {[unks]}" )
    unks = [ i for i in exposure_instruments if i not in models.instrument.INSTRUMENT_CLASSNAME_TO_CLASS ]
    if len( unks ) > 0:
        raise RuntimeError( f"Failed database migration: unknown instruments in the exposures table: {[unks]}" )

    all_instruments = set( image_instruments + exposure_instruments )
    filter_translations = {}

    for instr in all_instruments:
        instrobj = get_instrument_instance( instr )
        filter_translations[ instr ] = {}
        filts = conn.execute( sa.text( "SELECT DISTINCT ON(filter) filter FROM images WHERE instrument=:instr" ),
                              { 'instr': instr } ).all()
        filts = [ f[0] for f in filts ]
        for filt in filts:
            if longtoshort:
                filter_translations[ instr ][ filt ] = instrobj.get_short_filter_name( filt )
            else:
                filter_translations[ instr ][ filt ] = instrobj.get_full_filter_name( filt )

    # Now filter_translations is a dictionary keyed by instruments,
    #   and each value is itself an dictionary with a mapping of
    #   old filter → new filter for the database.

    return filter_translations


def upgrade() -> None:
    # Manually added by RKNOP 2024-12-18
    # Try to adapt a live database's filter columns in images and ex
    # Not dealing with filter arrays because I know as of the time that
    #   this migration is happening, we don't have a live database
    #   that uses filter arrays.
    filter_translations = get_filter_translations()

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('exposures', sa.Column('_filter', sa.Text(), nullable=True))
    op.drop_index('ix_exposures_filter', table_name='exposures')
    op.create_index(op.f('ix_exposures__filter'), 'exposures', ['_filter'], unique=False)

    ###
    # Manual RKNOP 2024-12-18
    conn = op.get_bind()
    for instr, mapping in filter_translations.items():
        for oldfilt, newfilt in mapping.items():
            conn.execute( sa.text( "UPDATE exposures SET _filter=:newfilt "
                                   "WHERE instrument=:instr AND filter=:oldfilt" ),
                          { 'instr': instr, 'newfilt': newfilt, 'oldfilt': oldfilt } )
            conn.execute( sa.text( "UPDATE images SET filter=:newfilt "
                                   "WHERE instrument=:instr AND filter=:oldfilt" ),
                          { 'instr': instr, 'newfilt': newfilt, 'oldfilt': oldfilt } )
    #
    ###

    op.drop_column('exposures', 'filter')
    op.create_check_constraint(
        constraint_name='exposures_filter_or_array_check',
        table_name='exposures',
        condition='NOT(_filter IS NULL AND filter_array IS NULL)'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    filter_translations = get_filter_translations( longtoshort=False )

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('exposures', sa.Column('filter', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_exposures__filter'), table_name='exposures')
    op.create_index('ix_exposures_filter', 'exposures', ['filter'], unique=False)

    ###
    # Manual RKNOP 2024-12-18
    conn = op.get_bind()
    for instr, mapping in filter_translations.items():
        for oldfilt, newfilt in mapping.items():
            conn.execute( sa.text( "UPDATE exposures SET filter=:newfilt "
                                   "WHERE instrument=:instr AND _filter=:oldfilt" ),
                          { 'instr': instr, 'newfilt': newfilt, 'oldfilt': oldfilt } )
            conn.execute( sa.text( "UPDATE images SET filter=:newfilt "
                                   "WHERE instrument=:instr AND filter=:oldfilt" ),
                          { 'instr': instr, 'newfilt': newfilt, 'oldfilt': oldfilt } )
    #
    ###

    op.drop_column('exposures', '_filter')
    op.create_check_constraint(
        constraint_name='exposures_filter_or_array_check',
        table_name='exposures',
        condition='NOT(filter IS NULL AND filter_array IS NULL)'
    )
    # ### end Alembic commands ###
