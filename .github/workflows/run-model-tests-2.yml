name: Run Model Tests 2

on:
  workflow_dispatch:
  workflow_run:
    workflows: ['Run ruff Linter']
    types: [completed]

jobs:
  tests:
    name: run tests in docker image
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      COMPOSE_FILE: tests/docker-compose.yaml

    steps:
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2

      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: log into github container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: cleanup
        run: |
          # try to save HDD space on the runner by removing some unneeded stuff
          # ref: https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      # IF BUILDING DOCKER IMAGES IN EACH STEP
      # Make sure the code doing this in run-improc-tests.yml is right.
      # Uncomment it there, and copy it here.  Remove the "pull images" step.

      - name: pull images
        run: |
          docker compose pull archive postgres conductor mailhog webap runtests kafka-server

      # I would love to have a separate workflow that just pulls the one
      # image needed and runs the ruff linter, and have this workflow
      # here (plus the other test-running workflows) trigger off of that
      # one.  That way, the slow test workflows won't even start until
      # the linter passes.  But, I haven't figure out how to implement
      # that with github actions in a way that will work on Pull
      # Requests, only on the main branch.
      - name: run ruff linter
        run: |
          docker compose run runruff

      - name: run test
        run: |
          shopt -s nullglob
          TEST_SUBFOLDER=$(ls tests/models/test_{m..z}*.py) docker compose run -e SKIP_BIG_MEMORY=1 -e SKIP_NOIRLAB_DOWNLOADS=1 runtests
