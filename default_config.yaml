overrides:
  - local_overrides.yaml
augments:
  - local_augments.yaml

path:
  data_root: null
  data_temp: null

db:
  engine: postgresql
  user: postgres
  password: fragile
  host: localhost
  port: 5432
  database: seechange

storage:
  images:
    # can choose hdf5 as well, but this is not yet implemented
    format: fits
    # should Image object save the weights/flags/etc in a single file with the image data?
    single_file: false
    # The convention for building filenames for images
    # Use any of the following: short_name, date, time, section_id, filter, ra, dec, prov_id
    # Can also use section_id_int if the section_id is always an integer
    # Can also use ra_int and ra_frac to get the integer number before/after the decimal point
    # (the same can be done for dec). Also use ra_int_h to get the number in hours.
    # to get the declination with "p" or "m" replacing the sign, use dec_int_pm.
    # The string given here is fed into the python format() function
    # so you can use e.g., {ra_int:03d} to get a 3 digit zero padded right ascension.
    # The name convention can also include subfolders (e.g., using {ra_int}/...).
    # The minimal set of fields to make the filenames unique include:
    # inst_name (short instrument name), date, time, section_id, prov_hash
    # (in this example, the first six characters of the provenance unique hash)
    name_convention: "{ra_int:03d}/{inst_name}_{date}_{time}_{section_id}_{filter}_{im_type}_{prov_hash:.6s}"


# ======================================================================
# Archive:
#
# Set to null if there is no archive; otherwise, a dict
# Subfields:
#   url: the URL of the archive server, or null if archive is on the filesystem
#   verify_cert: boolean, should we verify the SSL cert of the archive server
#   path_base: the base of the collection on the archive server (a string unique to this dataset)
#   read_dir: the directory to read from if the archive is on the local filesystem, or null
#   write_dir: the directory to write to if the archive is on the local filesystem, or null

archive: null

# Pipeline components
#
# For documentation on the parameters, see the Parameters subclass
# in the file that defines each part of the pipeline

pipeline: {}

preprocessing:
  use_sky_subtraction: False

extraction: {}

astro_cal:
  cross_match_catalog: Gaia

photo_cal:
  cross_match_catalog: Gaia

subtraction:
  method: hotpants

detection:
  subtraction: true
  threshold: 3

cutting:
  cutout_size: 20

measurement:
  photometry_method: aperture
  aperture_radius: 3.0
  real_bogus_version: null

# Specific configuration for specific instruments
# Instruments should override the two defaults from
# instrument_defaults; they may add additional
# configuration that their code needs.

instrument_default:
  calibratorset: nightly
  flattype: sky

# DECam

# For the observatory-supplied calibrations, NOIRLab distributes them on
# a Google Drive, which is a nightmare to try to download
# programmatically.  What's more, they come in ginormous tar files,
# which are slow to process; especially for tests, where we just want to
# do a couple of chips, it's not worth the time.  So, I've untarred the
# files on the NERSC web portal to allow them to be grabbed
# individually.  These can be found on Perlmutter at
# /global/cfs/dirs/m2218/www/decam_calibration_files

decam:
  calibratorset: externally_supplied
  flattype: externally_supplied
  calibfiles:
    mjd: 56876
    urlbase: https://portal.nersc.gov/cfs/m2218/decam_calibration_files/
    linearity: DECamMasterCal_56475/linearity/linearity_table_v0.4.fits
    fringebase: DECamMasterCal_56876/fringecor/DECam_Master_20131115v1
    flatbase: DECamMasterCal_56876/starflat/DECam_Master_20130829v3
